//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `Server.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Server;

public interface HelloPrx extends com.zeroc.Ice.ObjectPrx
{
    default void sayHello()
    {
        sayHello(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void sayHello(java.util.Map<String, String> context)
    {
        _iceI_sayHelloAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> sayHelloAsync()
    {
        return _iceI_sayHelloAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> sayHelloAsync(java.util.Map<String, String> context)
    {
        return _iceI_sayHelloAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_sayHelloAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "sayHello", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void topGenres()
    {
        topGenres(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void topGenres(java.util.Map<String, String> context)
    {
        _iceI_topGenresAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> topGenresAsync()
    {
        return _iceI_topGenresAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> topGenresAsync(java.util.Map<String, String> context)
    {
        return _iceI_topGenresAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_topGenresAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "topGenres", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void topArtist()
    {
        topArtist(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void topArtist(java.util.Map<String, String> context)
    {
        _iceI_topArtistAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> topArtistAsync()
    {
        return _iceI_topArtistAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> topArtistAsync(java.util.Map<String, String> context)
    {
        return _iceI_topArtistAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_topArtistAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "topArtist", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default String startVoice(String text)
    {
        return startVoice(text, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String startVoice(String text, java.util.Map<String, String> context)
    {
        return _iceI_startVoiceAsync(text, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> startVoiceAsync(String text)
    {
        return _iceI_startVoiceAsync(text, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> startVoiceAsync(String text, java.util.Map<String, String> context)
    {
        return _iceI_startVoiceAsync(text, context, false);
    }

    /**
     * @hidden
     * @param iceP_text -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_startVoiceAsync(String iceP_text, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "startVoice", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_text);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    default Music[] searchBar(String text)
    {
        return searchBar(text, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Music[] searchBar(String text, java.util.Map<String, String> context)
    {
        return _iceI_searchBarAsync(text, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Music[]> searchBarAsync(String text)
    {
        return _iceI_searchBarAsync(text, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Music[]> searchBarAsync(String text, java.util.Map<String, String> context)
    {
        return _iceI_searchBarAsync(text, context, false);
    }

    /**
     * @hidden
     * @param iceP_text -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Music[]> _iceI_searchBarAsync(String iceP_text, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Music[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "searchBar", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_text);
                 }, istr -> {
                     Music[] ret;
                     ret = MusicListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    default void library()
    {
        library(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void library(java.util.Map<String, String> context)
    {
        _iceI_libraryAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> libraryAsync()
    {
        return _iceI_libraryAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> libraryAsync(java.util.Map<String, String> context)
    {
        return _iceI_libraryAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_libraryAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "library", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void bookmarks()
    {
        bookmarks(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void bookmarks(java.util.Map<String, String> context)
    {
        _iceI_bookmarksAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> bookmarksAsync()
    {
        return _iceI_bookmarksAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> bookmarksAsync(java.util.Map<String, String> context)
    {
        return _iceI_bookmarksAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_bookmarksAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "bookmarks", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void musicInfo(int identifier)
    {
        musicInfo(identifier, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void musicInfo(int identifier, java.util.Map<String, String> context)
    {
        _iceI_musicInfoAsync(identifier, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> musicInfoAsync(int identifier)
    {
        return _iceI_musicInfoAsync(identifier, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> musicInfoAsync(int identifier, java.util.Map<String, String> context)
    {
        return _iceI_musicInfoAsync(identifier, context, false);
    }

    /**
     * @hidden
     * @param iceP_identifier -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_musicInfoAsync(int iceP_identifier, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "musicInfo", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeInt(iceP_identifier);
                 }, null);
        return f;
    }

    default void like(int identifier)
    {
        like(identifier, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void like(int identifier, java.util.Map<String, String> context)
    {
        _iceI_likeAsync(identifier, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> likeAsync(int identifier)
    {
        return _iceI_likeAsync(identifier, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> likeAsync(int identifier, java.util.Map<String, String> context)
    {
        return _iceI_likeAsync(identifier, context, false);
    }

    /**
     * @hidden
     * @param iceP_identifier -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_likeAsync(int iceP_identifier, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "like", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeInt(iceP_identifier);
                 }, null);
        return f;
    }

    default String start(int identifier)
    {
        return start(identifier, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String start(int identifier, java.util.Map<String, String> context)
    {
        return _iceI_startAsync(identifier, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> startAsync(int identifier)
    {
        return _iceI_startAsync(identifier, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> startAsync(int identifier, java.util.Map<String, String> context)
    {
        return _iceI_startAsync(identifier, context, false);
    }

    /**
     * @hidden
     * @param iceP_identifier -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_startAsync(int iceP_identifier, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "start", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_identifier);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    default String[] showAll()
    {
        return showAll(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String[] showAll(java.util.Map<String, String> context)
    {
        return _iceI_showAllAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<String[]> showAllAsync()
    {
        return _iceI_showAllAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<String[]> showAllAsync(java.util.Map<String, String> context)
    {
        return _iceI_showAllAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String[]> _iceI_showAllAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "showAll", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     String[] ret;
                     ret = istr.readStringSeq();
                     return ret;
                 });
        return f;
    }

    default Music[] findAll()
    {
        return findAll(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Music[] findAll(java.util.Map<String, String> context)
    {
        return _iceI_findAllAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Music[]> findAllAsync()
    {
        return _iceI_findAllAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Music[]> findAllAsync(java.util.Map<String, String> context)
    {
        return _iceI_findAllAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Music[]> _iceI_findAllAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Music[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "findAll", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     Music[] ret;
                     ret = MusicListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    default Music findOne()
    {
        return findOne(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Music findOne(java.util.Map<String, String> context)
    {
        return _iceI_findOneAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Music> findOneAsync()
    {
        return _iceI_findOneAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Music> findOneAsync(java.util.Map<String, String> context)
    {
        return _iceI_findOneAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Music> _iceI_findOneAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Music> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "findOne", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     Music ret;
                     ret = Music.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default void send(int offset, byte[] bytes, String path)
    {
        send(offset, bytes, path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void send(int offset, byte[] bytes, String path, java.util.Map<String, String> context)
    {
        _iceI_sendAsync(offset, bytes, path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> sendAsync(int offset, byte[] bytes, String path)
    {
        return _iceI_sendAsync(offset, bytes, path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> sendAsync(int offset, byte[] bytes, String path, java.util.Map<String, String> context)
    {
        return _iceI_sendAsync(offset, bytes, path, context, false);
    }

    /**
     * @hidden
     * @param iceP_offset -
     * @param iceP_bytes -
     * @param iceP_path -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_sendAsync(int iceP_offset, byte[] iceP_bytes, String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "send", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeInt(iceP_offset);
                     ostr.writeByteSeq(iceP_bytes);
                     ostr.writeString(iceP_path);
                 }, null);
        return f;
    }

    default String demoSSL()
    {
        return demoSSL(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String demoSSL(java.util.Map<String, String> context)
    {
        return _iceI_demoSSLAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> demoSSLAsync()
    {
        return _iceI_demoSSLAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> demoSSLAsync(java.util.Map<String, String> context)
    {
        return _iceI_demoSSLAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_demoSSLAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "demoSSL", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static HelloPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), HelloPrx.class, _HelloPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static HelloPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), HelloPrx.class, _HelloPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static HelloPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), HelloPrx.class, _HelloPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static HelloPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), HelloPrx.class, _HelloPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static HelloPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, HelloPrx.class, _HelloPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static HelloPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, HelloPrx.class, _HelloPrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default HelloPrx ice_context(java.util.Map<String, String> newContext)
    {
        return (HelloPrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default HelloPrx ice_adapterId(String newAdapterId)
    {
        return (HelloPrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default HelloPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (HelloPrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default HelloPrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (HelloPrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default HelloPrx ice_invocationTimeout(int newTimeout)
    {
        return (HelloPrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default HelloPrx ice_connectionCached(boolean newCache)
    {
        return (HelloPrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default HelloPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (HelloPrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default HelloPrx ice_secure(boolean b)
    {
        return (HelloPrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default HelloPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (HelloPrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default HelloPrx ice_preferSecure(boolean b)
    {
        return (HelloPrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default HelloPrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (HelloPrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default HelloPrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (HelloPrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default HelloPrx ice_collocationOptimized(boolean b)
    {
        return (HelloPrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default HelloPrx ice_twoway()
    {
        return (HelloPrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default HelloPrx ice_oneway()
    {
        return (HelloPrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default HelloPrx ice_batchOneway()
    {
        return (HelloPrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default HelloPrx ice_datagram()
    {
        return (HelloPrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default HelloPrx ice_batchDatagram()
    {
        return (HelloPrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default HelloPrx ice_compress(boolean co)
    {
        return (HelloPrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default HelloPrx ice_timeout(int t)
    {
        return (HelloPrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default HelloPrx ice_connectionId(String connectionId)
    {
        return (HelloPrx)_ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default HelloPrx ice_fixed(com.zeroc.Ice.Connection connection)
    {
        return (HelloPrx)_ice_fixed(connection);
    }

    static String ice_staticId()
    {
        return "::Server::Hello";
    }
}
